Crear la base de datos en workbench (schema): zero-db

Crear un proyecto
npm init -y

Dependencias a instalar:
npm i express
npm i dotenv
npm i sequelize mysql2
npm i --save -dev nodemon
npm list -g 

Dependencias a instalar de Desarrollo:
npm i sequelize-cli --D
npm i sequelize-cli -g  

Crear en la raiz del proyecto los siguientes archivos:
.gitignore ( para ignorar los archivos de Git). 
.env (Para declarar las variables de entorno)
.sequelizerc 

Abrir el archivo.gitignore y en su interior agregar:
/node_modules/

Abrir el archivo.env y en su interior agregar:

DB_USERNAME= root
DB_PASSWORD=
DB_HOST= localhost
DB_DATABASE= zero
DB_PORT=3306
DB_DIALECT=mysql

Abrir el archivo.app.js y en su interior tiene

//REQUIRES
const express = require('express');
const app = express();
const path = require('path');
// const router = express.Router();
const methodOverride  = require("method-override");
const mainController = require('./src/controllers/mainController');
const userLoggedMiddleware = require('./src/middlewares/userLoggedMiddleware');
const session = require('express-session');
const cookie = require('cookie-parser');


const port = 3000;


//RUTAS
const mainRutas = require('./src/routers/mainRouter');
const productRutas = require('./src/routers/productRouter');
const userRutas = require('./src/routers/userRouter');

//EXPRESS
app.use(express.static('public'));

//TEMPLATE ENGINE
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, '/src/views'));

//MIDDLEWARES
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(session({secret: 'maktamo', saveUninitialized: true, resave: false}));
app.use(cookie());
app.use(userLoggedMiddleware);


//METHOD OVERRIDE
app.use(methodOverride("_method"));


app.listen(process.env.PORT ||port, () => console.log(`Servidor funcionando en el puerto ${port}! <3`));


// --------------------------------- RUTAS -------------------------------- //

app.use('/', mainRutas);
app.use('/products',productRutas);
app.use('/user', userRutas);

//ERROR 404 : siempre tiene que ir al final, si no es lo unico que muestra la pagina
app.use((req, res, next) => {
    res.status(404).render('error404')
});

Abrir el archivo -sequelizerc y en su interior agregar:
const path = require('path')
module.exports = {
config: path.resolve('./src/database/config', 'config.js'),
'models-path': path.resolve('./src/database/models'),
'seeders-path': path.resolve('./src/database/seeders'),
'migrations-path': path.resolve('./src/database/migrations'),
}


Crear la carpeta en la raiz:
public
src

Dentro de la carpeta src:
crear el archivo app.js
crear las carpetas routes y controller

Ejecutar sequelize-cli init para crear las carpetas que menciona .sequelize


Ingresar a src - config y en el interior del archivo config.js reemplazar todo por
// Para tomar lo parametros del env
require('dotenv').config()

module.exports =

{

    "username": process.env.DB_USERNAME,
    "password": process.env.DB_PASSWORD,
    "database": process.env.DB_DATABASE,
    "host": process.env.DB_HOST,
    "port": process.env.DB_PORT,
    "dialect": process.env.DB_DIALECT,

    seederStorage: "sequelize",
    seederStorageTableName: "seeds",

    migrationStorage: "sequelize",
    migrationStorageTableName: "migrations"

}

Crear todos los modelos intervinientes
IMPORTANTE VERIFICAR EL ORDEN DE EJECUCION  ///  PRIMERO SE GENERAN LAS QUE NO TIENEN FORINKEY SIN DEPENDENCIAS

sequelize model:generate --name Genres --attributes name:string

sequelize model:generate --name Format --attributes name:string

sequelize model:generate --name Categories --attributes name:string

sequelize model:generate --name Images --attributes url:string

sequelize model:generate --name Roles --attributes name:string

sequelize model:generate --name Users --attributes firstname:string,lastname:string,email:string,password:string,user_image:string,roles_ID:integer

sequelize model:generate --name Products --attributes name:string,price:decimal,stock:integer,stock_min:integer,stock_max:integer,description:text,artist:string,visibility:integer,IDgenre:integer,IDformat:integer,ID_category:integer,IDImages:integer


Crear todas las relaciones correpondientes

-------------------Modelo Categories---------------

    static associate(models) {
      Categories.hasMany(models.Products,{
        foreignKey: 'IDgenre',
        as: 'Products'
      });
    }

----------------------Modelo Format-----------------

    static associate(models) {
      Format.hasMany(models.Products,{
        foreignKey: 'IDformat',
        as: 'Products'
      });
    }

----------------------Modelo Genres-----------------

    static associate(models) {
      Genres.hasMany(models.Products,{
        foreignKey: 'ID_category',
        as: 'Products'
      });
    }

----------------------Modelo Images-----------------

    static associate(models) {
      Images.hasMany(models.Products,{
        foreignKey: 'IDImages',
        as: 'Products'
      });
    }

----------------------- Products --------------------

    static associate(models) {
      Products.belongsTo(models.Genres,{
        foreignKey:'IDgenre',
        as: 'Genres'
      }),

      Products.belongsTo(models.Format,{
        foreignKey:'IDformat',
        as: 'Format'
      }),

      Products.belongsTo(models.Category,{
        foreignKey:'ID_category',
        as: 'Category'
      }),

      Products.belongsTo(models.Images,{
        foreignKey:'IDImages',
        as: 'Images'
      });
    }

----------------------Modelo Roles-----------------

    static associate(models) {
      Roles.hasMany(models.Users,{
        foreignKey: 'roles_ID',
        as: 'Users'
      });
    }

------------------------ Users --------------------

    static associate(models) {
      Users.belongsTo(models.Roles,{
        foreignKey:'roles_ID',
        as: 'Roles'
      });
    }

AHORA HAY QUE AGREGAR LAS CLAVES FORANEAS A LAS  MIGRACIONES

MIGRACION PRODUCT

      IDgenre: {
          type: Sequelize.INTEGER,
          references: {
            model: 'Genres',
            key: 'id'
          }

      },
      IDformat: {
          type: Sequelize.INTEGER,
          references: {
            model: 'Formats',
            key: 'id'
          }

      },
      ID_category: {
          type: Sequelize.INTEGER,
          references: {
            model: 'Categories',
            key: 'id'
          }
      },
      IDImages: {
          type: Sequelize.INTEGER,
          references: {
            model: 'Images',
            key: 'id'
          }

MIGRACIONES USERS

        roles_ID: {
          type: Sequelize.INTEGER,
          references: {
            model: 'Roles',
            key: 'id'
          }


CREAR LA MIGRACION Y CREACION DE LAS TABLAS
sequelize db:migrate   // opcion 1
"node_modules/.bin/sequelize" db:migrate // opcion 2
